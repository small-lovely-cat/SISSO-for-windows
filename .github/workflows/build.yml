name: Build SISSO for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Intel oneAPI
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: intel-classic
          version: '2021.10'

      - name: Install Intel MPI
        shell: pwsh
        run: |
          # 下载并安装 Intel MPI
          Invoke-WebRequest -Uri "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/44ab2be4-30c9-476d-8f79-943410ef6fa0/intel-mpi-2021.17.0.375_offline.exe" -OutFile "mpi_installer.exe"
          Start-Process -FilePath ".\mpi_installer.exe" -ArgumentList "--silent","--eula","accept" -Wait -NoNewWindow

      - name: Build SISSO
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          cd src
          mpiifort -F 100000000 -O2 -static var_global.f90 libsisso.f90 DI.f90 FC.f90 SISSO.f90 -o SISSO.exe

      - name: Copy required DLLs
        shell: pwsh
        run: |
          # 查找并复制 Intel 运行时 DLLs 到 src 目录
          $intelPath = "C:\Program Files (x86)\Intel\oneAPI"
          $dllFiles = @(
            "compiler\latest\windows\redist\intel64_win\compiler\*.dll",
            "mpi\latest\bin\*.dll",
            "mpi\latest\bin\release\*.dll"
          )
          foreach ($pattern in $dllFiles) {
            $files = Get-ChildItem -Path (Join-Path $intelPath $pattern) -ErrorAction SilentlyContinue
            foreach ($file in $files) {
              Copy-Item $file.FullName -Destination "src\" -Force
              Write-Host "Copied: $($file.Name)"
            }
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SISSO-windows
          path: src/*
          retention-days: 90

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release assets
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            zip -r "../${dir%/}.zip" .
            cd ..
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}